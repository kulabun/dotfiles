#!/bin/bash

####################################################################################################
# Runtime configuration
####################################################################################################
trap control_c SIGINT
trap control_c SIGTERM
trap control_c INT
set -eumo pipefail



####################################################################################################
# Constants
####################################################################################################
progname=$(basename $0)
aws="aws"
fzf="fzf -1 -0 --preview-window=up:80%:wrap"
highlight="bat --color=always --theme=TwoDark --decorations=never"
json="jq | $highlight --language=json"



####################################################################################################
# Helper Functions
####################################################################################################
select_and_describe() {
    listCommand=$1
    describeCommand=$2
    filter=$3
    fzf_args=""
    [ "$filter" != "" ] && fzf_args="-q $filter"

    #aws --output json lambda list-functions | jq -r ".Functions[].FunctionName" | fzf --preview 'aws lambda get-function --function-name  {}' -1 -0 --preview-window=up:80%

    result=$(eval $listCommand | $fzf --preview "$describeCommand {} | $json" $fzf_args)
    eval "$describeCommand $result | $json"
}

file_ext(){
    filename=$1
    echo ${filename##*.}
}


####################################################################################################
# Subcommands
####################################################################################################
sub_lambda() {
    filter=""
    [ "$#" -gt 0 ] && filter="$@"

    select_and_describe \
        "$aws lambda list-functions --query 'Functions[].[FunctionName]' --output text"\
        "$aws lambda get-function --function-name"\
        "$filter"
}

sub_cfn() {
    filter=""
    [ "$#" -gt 0 ] && filter="$@"

    select_and_describe \
        "$aws cloudformation list-stacks --query 'StackSummaries[].[StackName]' --output text"\
        "$aws cloudformation describe-stacks --stack-name"\
        "$filter"
}

sub_cfnevent() {
    filter=""
    [ "$#" -gt 0 ] && filter="$@"

    select_and_describe \
        "$aws cloudformation list-stacks --query 'StackSummaries[].[StackName]' --output text"\
        "$aws cloudformation describe-stack-events --stack-name"\
        "$filter"
}

sub_s3() {
    filter=""
    [ "$#" -gt 0 ] && filter="$@"

    bucket=$($aws s3api list-buckets | jq -r '.Buckets[].Name' | fzf)
    object=$($aws s3api list-objects --bucket $bucket --query 'Contents[].[Key]' --output text |\
        $fzf --preview "$aws s3 cp s3://$bucket/{} - | $highlight --language=$(file_ext html)")
    $aws s3 cp s3://$bucket/$object - | $highlight --language=$(file_ext $object)
}

sub_help(){
    echo "Usage: $progname <subcommand> [options]\n"
    echo "Subcommands:"
    echo "    lambda  Get information about Lambda function"
    echo "    cfn  Get information about CloudFormation stacks"
    echo "    cfnevent  Get information about CloudFormation stacks events"
    echo "    s3  View objects in s3 buckets"
    echo ""
}



####################################################################################################
# Main Execution Flow
####################################################################################################
[ "$#" == "0" ] && sub_help && exit 0

subcommand=$1
aws="aws --output json"

case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@ || \
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$progname --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
