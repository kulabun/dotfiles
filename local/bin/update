#!/bin/bash



#################### PRECONFIGURE ####################
GO_VERSION="1.11.2"
VISUAL_STUDIO_CODE_VERSION="1.29.1"
NODE_MAJOR_VERSION="10"

localroot="$HOME"/local

mkdir -p "$localroot"/bin
ln -sf "$localroot"/bin "$HOME"/bin
PATH="$PATH:$HOME/bin"
update-profile-symlinks



#################### HELPER FUNCTIONS ####################
function cmd_exists {
  command -v "$1" > /dev/null
}

function add_ubuntu_repository {
	repo_name=$1
	if ! ls /etc/apt/sources.list.d/ | grep $repo_name > /dev/null; then
		add-apt-repository "$repo_name"
		apt update
	fi
}

function install_with_pacman {
	[ "$#" -eq "0" ] && echo "Argument required" && return 1

    packageName="$1"
    if ! pacman -Qi $packageName > /dev/null; then
		echo "Getting latest $packageName"
        sudo pacman -S --noconfirm "$packageName"
    fi
}

function install_with_yay {
	[ "$#" -eq "0" ] && echo "Argument required" && return 1

    packageName="$1"
    if ! yay -Qi $packageName > /dev/null; then
		echo "Getting latest $packageName"
        yay -S --noconfirm "$packageName"
    fi
}

function install_with_apt {
	[ "$#" -eq "0" ] && echo "Argument required" && return 1
	[ "$#" -eq "2" ] && add_ubuntu_repository "$2"

    packageName="$1"
	if ! dpkg -l $packageName >/dev/null; then
		echo "Getting latest $packageName"
        sudo apt install -y "$packageName"
    fi
}

function arch_install {
	cmd_exists "yay" && install_with_yay "$1" && return 0
	cmd_exists "pacman" && install_with_pacman "$1" && return 0
}

function ubuntu_install {
	cmd_exists "apt" && install_with_apt "$1"
}

function is_arch {
	cmd_exists "pacman"
}

function is_ubuntu {
	cmd_exists "apt"
}

function install {
	arch_install "$1"
	ubuntu_install "$1"
}

function createFolder {
	[ -d "$1" ] || mkdir -p "$1"
}



#################### SYSTEM UPDATE ####################
echo "Getting latest system updates"
function system_update {
	cmd_exists yay && yay -Syu --noconfirm && return 0
	cmd_exists pacman && sudo pacman -Syu --noconfirm && return 0
	is_ubuntu && sudo apt update && sudo apt upgrade -y && return 0
	return 1
}
system_update || echo "System Update FAILED"


#################### PRE INSTALL PACKAGES ####################
install "curl"
install "wget"
install "python"
install "ruby" && ubuntu_install "ruby-dev"
install "ruby-bundler"
install "cmake"
install "xclip"


arch_install "vim" && ubuntu_install "vim" "ppa:jonathonf/vim"
arch_install "git" && ubuntu_install "git" "ppa:git-core/ppa"
arch_install "fish" && ubuntu_install "fish" "ppa:fish-shell/release-2"
arch_install "go" && ubuntu_install "golang-go" "ppa:longsleep/golang-backports"

ubuntu_install "apt-transport-https"
ubuntu_install "ca-certificates"
ubuntu_install "software-properties-common"



#################### YAY ####################
if is_arch && ! cmd_exists yay; then
    echo "Getting latest YAY"
    sudo pacman -S base-devel --noconfirm
    git clone https://aur.archlinux.org/yay.git /tmp/yay
    cd /tmp/yay
    makepkg -si --noconfirm
	yay -Syu --noconfirm
fi



#################### YADM ####################
if ! cmd_exists yadm && echo "Getting latest YADM"; then
	sudo curl -fLo /usr/local/bin/yadm https://github.com/TheLocehiliosan/yadm/raw/master/yadm
	sudo chmod a+x /usr/local/bin/yadm
fi

origin=$(yadm remote get-url origin)
if [ "$origin" != "git@github.com:kulabun/dotfiles.git" ] && [ "$origin" != "https://github.com/kulabun/dotfiles.git" ]; then
	echo "Getting latest dotfiles"
	yadm clone https://github.com/kulabun/dotfiles.git
	yadm pull origin master
fi
if [ "$origin" != "git@github.com:kulabun/dotfiles.git" ]; then
	yadm remote remove origin
	yadm remote add origin "git@github.com:kulabun/dotfiles.git"
fi

yadm gitconfig user.name "Konstantin Labun"
yadm gitconfig user.email konstantin.labun@gmail.com
yadm gitconfig commit.gpgsign false
update-profile-symlinks


#################### DOTFILES ####################
echo "Getting latest dotfiles"
yadm pull origin master
#bash -c "yadm decrypt"



#################### FISHER ####################
echo "Getting latest Fisher"
curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
fish -c "fisher" 2> /dev/null



#################### DIFF-SO-FANCY ####################
echo "Getting latest diff-so-fancy"
wget -q https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/third_party/build_fatpack/diff-so-fancy -O "$localroot"/bin/diff-so-fancy
chmod +x "$localroot"/bin/diff-so-fancy



#################### NETWORKMANAGER-DMENU ####################
if ! cmd_exists "nmcli"; then
	install "networkmanager"
	systemctl enable NetworkManager.service
fi

ubuntu_install "libnm-util-dev"
echo "Getting latest NetworkManager-Dmenu"
wget -q https://raw.githubusercontent.com/firecat53/networkmanager-dmenu/master/networkmanager_dmenu -O "$localroot"/bin/networkmanager-dmenu
chmod +x "$localroot"/bin/networkmanager-dmenu



#################### VIM ####################
createFolder "$HOME"/.vim/swaps
createFolder "$HOME"/.vim/backups
echo "Getting latest VIM Plugins"
[ -e "$HOME"/.vim/autoload/plug.vim ] || curl -fLo ~/.vim/autoload/plug.vim --create-dirs "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
#vim +'PlugUpdate --sync' +'PlugClean! --sync' '+qall!'
#vim +'CocInstall coc-gocode coc-yyaml coc-json coc-html coc-css coc-pyls coc-tsserver coc-prettier coc-solargraph'



#################### NEOVIM ####################
arch_install "neovim"
arch_install "aur/universal-ctags-git"



#################### FZF ####################
arch_install "fzf"
if ! is_arch; then
	echo "Getting latest FZF"
	fzf_git_root="$HOME"/.fzf
	[ -d "$fzf_git_root" ] || git clone --depth 1 "https://github.com/junegunn/fzf.git" "$FZF_PATH"
	cd "$fzf_git_root" && git pull && ./install
	cp ./bin/fzf "$localroot"/bin/fzf
fi



#################### FZY ####################
arch_install "fzy" # fzf replacement
if ! is_arch; then
	echo "Getting latest FZY"
	fzy_git_root="$HOME"/.fzy
	[ -d "$fzy_git_root" ] || git clone --depth 1 "https://github.com/jhawthorn/fzy" "$fzy_git_root"
	cd "$fzy_git_root" && git pull
	make && cp ./bin/fzy "$localroot"/bin/fzf
fi



#################### RUSTUP + CARGO ####################
[ -d "$HOME"/.cargo/env ] || curl https://sh.rustup.rs -sSf | bash
source ~/.cargo/env



#################### ALACRITTY ####################
arch_install alacritty
if is_ubuntu; then
	echo "Building latest alacritty"
	alacritty_git_root="$HOME"/.alacritty
	if ! cmd_exists alacritty; then
		sudo apt-get install -y libfreetype6-dev libfontconfig1-dev
		rustup override set stable
		rustup update stable
		git clone https://github.com/jwilm/alacritty.git $HOME/.alacritty
	fi
	cd "$alacritty_git_root"
	git pull
	cargo build --release
	cp target/release/alacritty "$localroot"/bin/
	cp alacritty.desktop $HOME/.local/share/applications/

	mkdir -p "$localroot"/share/man/man1
	gzip -c alacritty.man > "$localroot"/share/man/man1/alacritty.1.gz

	cp alacritty-completions.fish "$HOME"/.config/fish/completions/alacritty.fish
	# sudo tic -e alacritty,alacritty-direct alacritty.info
fi



#################### VISUAL STUDIO CODE ####################
arch_install "visual-studio-code-bin"
if is_ubuntu && ! cmd_exists "code"; then
	curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
	sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
	sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
	sudo apt update
	ubuntu_install "code"
fi
# Electron-based application use gvfs-trash. This is deprecated package, so let just emulate it..
if ! cmd_exists "gvfs-trash"; then
	echo -e "#!/bin/bash\ntrash $@" | sudo tee /usr/bin/gvfs-trash > /dev/null
fi

echo "Getting latest VSCode extensions"
cat ~/.vscode/extensions.list | xargs -L 1 code --force --install-extension



#################### NODE PACKAGE MANAGER ####################
arch_install "nodejs"
is_ubuntu && sudo snap install node --classic --channel=$NODE_MAJOR_VERSION

echo "Getting latest NPM packages"
sudo npm update --unsafe-perm -g
cmd_exists "remarker" || sudo npm install -g remarker



#################### GITHUB'S HUB  ####################
echo "Building latest GitHub git-wrapper(hub)"
go_path="$HOME"/go
go_github_path="$go_path"/src/github.com/github
hub_path="$go_github_path"/hub
if ! test -e $hub_path; then
    mkdir -p "$go_github_path"
    git clone --config transfer.fsckobjects=false --config receive.fsckobjects=false --config fetch.fsckobjects=false https://github.com/github/hub.git "$hub_path"
fi
cd "$hub_path"
git pull
make install prefix="$localroot"



#################### CHROME  ####################
arch_install "google-chrome"
if is_ubuntu && ! cmd_exists "google-chrome"; then
	wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
	sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
	sudo apt update
	ubuntu_install "google-chrome-stable"
fi



#################### UTILS  ####################
curl -L --silent --output "$localroot"/bin/json2yaml "https://gist.githubusercontent.com/kulabun/5b2e9f640e8f0bfa2271836439dc6efb/raw/030b01748c33fff31c78636aafb00725e7974db6/json2yaml.py"
chmod +x "$localroot"/bin/json2yaml
ln -sf "$localroot"/bin/json2yaml "$localroot"/bin/yaml2json



#################### GO PACKAGES ####################
go get -u github.com/kulabun/gojson/gojson
go get -u github.com/gopasspw/gopass



#################### VPN ####################
install "openvpn"
if is_arch && ! test -e "/etc/openvpn/ovpn_tcp"; then
	cd /etc/openvpn
	sudo wget https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
	sudo unzip ovpn.zip
	sudo rm ovpn.zip
fi



#################### DOCKER ####################
arch_install "docker-bin"
arch_install "docker-compose-bin"
if is_ubuntu; then
	if ! cmd_exists "docker"; then
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		sudo apt update
		ubuntu_install docker-ce
	fi
	cmd_exists "docker-compose" || sudo curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
fi
ps aux | grep "docker" | grep -v "grep" || sudo systemctl enable docker.service
groups | grep "docker" || sudo usermod -aG docker $USER

# CTOP is a docker monitor
if ! cmd_exists "ctop"; then
	sudo wget https://github.com/bcicen/ctop/releases/download/v0.7.1/ctop-0.7.1-linux-amd64 -O /usr/local/bin/ctop
	sudo chmod +x /usr/local/bin/ctop
fi



#################### PYTHON PIP ####################
if ! cmd_exists "pip" && is_ubuntu; then
	curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
	python /tmp/get-pip.py --user
fi



#################### AWS CLI ####################
arch_install "aws-cli"
is_ubuntu && pip install awscli --upgrade --user



#################### RIPGREP ####################
arch_install "ripgrep" # silversearcher/ag replacement
if is_ubuntu; then
	echo "Building latest ripgrep"
	ripgrep_git_root="$HOME"/.ripgrep
	[ -d "$ripgrep_git_root" ] || git clone "https://github.com/BurntSushi/ripgrep" "$ripgrep_git_root"
	cd $ripgrep_git_root
	git pull
	cargo build --release
	cp target/release/rg "$localroot"/bin/
fi



#################### FD ####################
arch_install "fd" # find replacement
if is_ubuntu; then
	echo "Building latest fd"
	fd_git_root="$HOME"/.fd
	[ -d "$fd_git_root" ] || git clone "https://github.com/sharkdp/fd" "$fd_git_root"
	cd "$fd_git_root"
	git pull
	cargo build --release
	cp target/release/fd "$localroot"/bin/
fi



#################### ModemManager(4G LTE) ####################
arch_install "modemmanager"
if is_arch; then
  systemctl enable ModemManager.service
  systemctl start ModemManager.service
fi



#################### TAIL INSTALL PACKAGES ####################
install "jq" # json processor
install "ranger" # moderm cli filemanager
install "traceroute" # trace network requests
install "uuid"
install "i3-wm"
install "strace" # to get debugging info is something goes wrong
install "gucharmap" # to find font symbols
install "youtube-dl"
install "gpicview" # picture viewer
install "nitrogen" # wallpaper manager
install "dialog" # GUI promt for cli commands
install "zenity" # GUI promt for cli commands
install "rofi"

#arch_install "the_silver_searcher" && ubuntu_install "silversearcher-ag"

# FONTS
install "ttf-dejavu"
install "ttf-liberation"
install "ttf-ubuntu-font-family"

arch_install "gradle"
arch_install "maven"
arch_install "jdk8-openjdk"
arch_install "jdk11-openjdk"
arch_install "visualvm"
arch_install "httpie"

# SYSTEM
arch_install "dunst"
arch_install "systemd-boot-pacman-hook"
arch_install "linux-headers"
arch_install "wpa_supplicant"
arch_install "mesa"
arch_install "libva"
arch_install "xorg-server"
arch_install "xorg-init"
arch_install "xorg-xrandr"
arch_install "community/light"
arch_install "xorg-xprop"
arch_install "xorg-xwininfo"
arch_install "xorg-xlsfonts"
arch_install "networkmanager"
arch_install "xfce4"
arch_install "python-gobject"
arch_install "pulseaudio"
arch_install "polybar"
arch_install "sddm"
arch_install "file-roller"
arch_install "thunar-volman"
arch_install "thunar-archive-plugin"
arch_install "alsa-utils"
arch_install "pamixer"
arch_install "openssh"
arch_install "unzip"
arch_install "xdg-user-dirs"
arch_install "scrot"
arch_install "trash-cli" # let allow apps to delete files to trash
arch_install "gvfs"
arch_install "gvfs-mtp"
arch_install "rsync"


#arch_install "tor-browser"
#arch_install "tldr"
#arch_install "spring-boot-cli"



#################### INSTALL NPM PACKAGES ####################



#################### POST INSTALL CONFIGURATION ####################
# disable wifi powersave mode
echo -e "[connection]\nwifi.powersave = 2" | sudo tee /etc/NetworkManager/conf.d/wifi-powersave.conf > /dev/null



#################### LOCAL CONFIG  ####################
[ -e $HOME/bin/update.local ] && source $HOME/bin/update.local
