#!/bin/bash

#set -eEuxo pipefail
set -Euo pipefail



#################### PRECONFIGURE ####################
VISUAL_STUDIO_CODE_VERSION="1.29.1"
NODE_MAJOR_VERSION="12"

localroot="$HOME"/local

mkdir -p "$localroot"/bin
ln -sf "$localroot"/bin "$HOME"
PATH="$PATH:$HOME/bin"



#################### HELPER FUNCTIONS ####################
function cmd_exists {
  command -v "$1" > /dev/null
}

function install {
  [ "$#" -eq "0" ] && echo "Argument required" && return 1

  packageName="$1"
  pkgManager="pacman"
  cmd_exists "yay" && pkgManager="yay"
  if ! $pkgManager -Qi $packageName > /dev/null; then
    echo "Getting latest $packageName"
    $pkgManager -S --noconfirm "$packageName"
  fi
}

function is_arch {
  cmd_exists "pacman"
}

function createFolder {
  [ -d "$1" ] || mkdir -p "$1"
}



#################### SYSTEM UPDATE ####################
echo "Getting latest system updates"
function system_update {
  sudo pacman -Syu --noconfirm
  cmd_exists yay && yay -Syua --noconfirm && return 0
  return 1
}
system_update



#################### PRE INSTALL PACKAGES ####################
install "curl"
install "wget"
install "python"
install "ruby"
install "ruby-bundler"
install "cmake"
install "xclip"
install "python3"
install "clang"
install "vim"
install "git"
install "fish"
install "go"



#################### YAY ####################
if is_arch && ! cmd_exists yay; then
  echo "Getting latest YAY"
  sudo pacman -S base-devel --noconfirm
  git clone https://aur.archlinux.org/yay.git /tmp/yay
  cd /tmp/yay
  makepkg -si --noconfirm
  yay -Syu --noconfirm
fi



#################### YADM ####################
if ! cmd_exists yadm && echo "Getting latest YADM"; then
  sudo curl -fLo /usr/local/bin/yadm https://github.com/TheLocehiliosan/yadm/raw/master/yadm
  sudo chmod a+x /usr/local/bin/yadm
fi

origin=$(yadm remote get-url origin)
if [ "$origin" != "git@github.com:kulabun/dotfiles.git" ] && [ "$origin" != "https://github.com/kulabun/dotfiles.git" ]; then
  echo "Getting latest dotfiles"
  yadm clone https://github.com/kulabun/dotfiles.git
  yadm pull origin master
fi
if [ "$origin" != "git@github.com:kulabun/dotfiles.git" ]; then
  yadm remote remove origin
  yadm remote add origin "git@github.com:kulabun/dotfiles.git"
fi

yadm gitconfig user.name "Konstantin Labun"
yadm gitconfig user.email konstantin.labun@gmail.com
yadm gitconfig commit.gpgsign false
update-profile-symlinks



#################### DOTFILES ####################
echo "Getting latest dotfiles"
yadm pull origin master
#bash -c "yadm decrypt"



#################### FISHER ####################
echo "Getting latest Fisher"
curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
fish -c "fisher" 2> /dev/null



#################### DIFF-SO-FANCY ####################
echo "Getting latest diff-so-fancy"
wget -q https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/third_party/build_fatpack/diff-so-fancy -O "$localroot"/bin/diff-so-fancy
chmod +x "$localroot"/bin/diff-so-fancy



#################### NETWORKMANAGER-DMENU ####################
if ! cmd_exists "nmcli"; then
  install "networkmanager"
  systemctl enable NetworkManager.service
fi

echo "Getting latest NetworkManager-Dmenu"
wget -q https://raw.githubusercontent.com/firecat53/networkmanager-dmenu/master/networkmanager_dmenu -O "$localroot"/bin/networkmanager-dmenu
chmod +x "$localroot"/bin/networkmanager-dmenu



#################### VIM ####################
createFolder "$HOME"/.vim/swaps
createFolder "$HOME"/.vim/backups
echo "Getting latest VIM Plugins"
[ -e "$HOME"/.vim/autoload/plug.vim ] || curl -fLo ~/.vim/autoload/plug.vim --create-dirs "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
bash -c "vim +'PlugUpdate --sync' +'PlugClean! --sync' '+qall!'"
#vim +'PlugUpdate --sync' +'PlugClean! --sync' '+qall!'
#vim +'CocInstall coc-gocode coc-yyaml coc-json coc-html coc-css coc-pyls coc-tsserver coc-prettier coc-solargraph'



#################### NODE PACKAGE MANAGER ####################
install "nodejs"
echo "Getting latest NPM packages"
sudo npm update --unsafe-perm -g
cmd_exists ask || sudo npm install -g ask-cli ; [ -e "$HOME/.ask/cli_config" ] || ask init
cmd_exists bst || sudo npm install -g bespoken-tools



#################### UTILS  ####################
curl -L --silent --output "$localroot"/bin/json2yaml "https://gist.githubusercontent.com/kulabun/5b2e9f640e8f0bfa2271836439dc6efb/raw/030b01748c33fff31c78636aafb00725e7974db6/json2yaml.py"
chmod +x "$localroot"/bin/json2yaml
ln -sf "$localroot"/bin/json2yaml "$localroot"/bin/yaml2json



#################### GO PACKAGES ####################
go get -u github.com/kulabun/gojson/gojson
go get -u github.com/kulabun/gopass
go get -u github.com/kulabun/jd # json diff
go get -u github.com/kulabun/license # github licenses
go get -u github.com/rclone/rclone



#################### VPN ####################
install "openvpn"
if is_arch && ! test -e "/etc/openvpn/ovpn_tcp"; then
  cd /etc/openvpn
  sudo wget https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
  sudo unzip ovpn.zip
  sudo rm ovpn.zip
fi



#################### DOCKER ####################
install "docker-bin"
install "docker-compose-bin"
ps aux | grep "docker" | grep -v "grep" || sudo systemctl enable docker.service
groups | grep "docker" || sudo usermod -aG docker $USER

# CTOP is a docker monitor
if ! cmd_exists "ctop"; then
  sudo wget https://github.com/bcicen/ctop/releases/download/v0.7.1/ctop-0.7.1-linux-amd64 -O /usr/local/bin/ctop
  sudo chmod +x /usr/local/bin/ctop
fi



#################### PYTHON PIP ####################
install python-pip
pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U --user
pip install --user awscli
pip install --user awslogs
pip install --user yq
#pip install jrnl --user



#################### AWSINFO ####################
echo "Building latest awsinfo"
awsinfo_git_root="$HOME"/.awsinfo
[ -d "$awsinfo_git_root" ] || git clone "https://github.com/kulabun/awsinfo" "$awsinfo_git_root"
cd "$awsinfo_git_root"
git pull
ln -sf "$awsinfo_git_root/scripts/awsinfo.bash" "$localroot"/bin/awsinfo



#################### ModemManager(4G LTE) ####################
install "modemmanager"
if is_arch; then
  systemctl enable ModemManager.service
  systemctl start ModemManager.service
fi



#################### Firmware / Drivers ####################
install "rtl8822bu-dkms-git"



#################### Alexa Skills Kit ####################



#################### TAIL INSTALL PACKAGES ####################
install "jq" # json processor
install "ranger" # moderm cli filemanager
install "traceroute" # trace network requests
install "uuid"
install "i3-wm"
install "strace" # to get debugging info is something goes wrong
install "gucharmap" # to find font symbols
install "youtube-dl"
install "gpicview" # picture viewer
install "nitrogen" # wallpaper manager
install "dialog" # GUI promt for cli commands
install "zenity" # GUI promt for cli commands
install "rofi"
install "rofi-calc"
install "xdotool"
install "fzf"


# FONTS
install "ttf-dejavu"
install "ttf-liberation"
install "ttf-ubuntu-font-family"

install "gradle"
install "maven"
install "jdk8-openjdk"
install "jdk11-openjdk"
install "visualvm"
install "httpie"

# SYSTEM
install "dunst"
install "systemd-boot-pacman-hook"
install "linux-headers"
install "wpa_supplicant"
install "mesa"
install "libva"
install "xorg-server"
install "xorg-init"
install "xorg-xrandr"
install "community/light"
install "xorg-xprop"
install "xorg-xwininfo"
install "xorg-xlsfonts"
install "networkmanager"
install "xfce4"
install "python-gobject"
install "pulseaudio"
install "polybar"
install "sddm"
install "file-roller"
install "thunar-volman"
install "thunar-archive-plugin"
install "alsa-utils"
install "pamixer"
install "openssh"
install "unzip"
install "xdg-user-dirs"
install "scrot"
install "trash-cli" # let allow apps to delete files to trash
install "gvfs"
install "gvfs-mtp"
install "rsync"
install "words" # Word files, required to make `look` command work(used by emacs autocompletion)
install "aspell-en" # English dictionary for spell validation


#install "tor-browser"
#install "tldr"
#install "spring-boot-cli"



#################### INSTALL ZSH ####################
install zsh
export ZPLUG_HOME="$HOME/.zplug"
[ -e $ZPLUG_HOME ] || git clone https://github.com/zplug/zplug $ZPLUG_HOME
cd $ZPLUG_HOME
git pull
zsh -c "source ~/.zshrc && zplug update"


#################### POST INSTALL CONFIGURATION ####################
# disable wifi powersave mode
echo -e "[connection]\nwifi.powersave = 2" | sudo tee /etc/NetworkManager/conf.d/wifi-powersave.conf > /dev/null
[ "$SHELL" != "/bin/zsh" ] && chsh -s "/bin/zsh"



#################### LOCAL CONFIG  ####################
#[ -e $HOME/bin/update.local ] && source $HOME/bin/update.local



#################### Clean Up ####################
is_arch && yay -Sc --noconfirm # remove packages cache
