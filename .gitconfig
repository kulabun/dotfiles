[include]
    path = .gitconfig.local
[push]
    default = current
[core]
    editor = vim
    filemode = false
    whitespace = warn,space-before-tab,trailing-space
    autocrlf = input
    pager = diff-so-fancy | less --tabs=4 -RFX
    excludesfile = ~/.gitignore
[diff]
    tool = vscode
    # Detect copies as well as renames
    renames = copies
[merge]
    tool = vscode
    # Include summaries of merged commits in newly created merge commit messages
    log = true
[difftool]
    prompt = false
[difftool "vscode"]
    cmd = "code --wait --diff $LOCAL $REMOTE"
[mergetool]
    prompt = false
[mergetool "vscode"]
    cmd = "code --wait $MERGED"
    prompt = false
[commit]
    template = ~/.gitmessage
    gpgsign = true
[credential]
    helper = store
[color]
    ui = true
[color "diff"]
    meta = yellow
    commit = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
[color "branch"]
    current = cyan reverse
    local = yellow
    remote = green
[color "status"]
    added = yellow
    changed = cyan
    untracked = red
[pager]
    diff = diff-so-fancy | less --tabs=1,5 -RFX
    show = diff-so-fancy | less --tabs=1,5 -RFX
[gpg]
    program = gpg
[alias]
    a = add
    au = add -u
    e = config --global -e
    s = status -sb
    c = commit
    cr = !git add -u && git dc && read && git commit
    l = log --color --graph --pretty=format:'%C(bold green)%h%Creset [%G?]-%C(yellow)%d%Creset %C(bold)%s%Creset | %C(green)%an%Creset, %C(blue)%ar%Creset'
    lh = log --color --graph --pretty=format:'%C(bold green)%H%Creset [%G?]-%C(yellow)%d%Creset %C(bold)%s%Creset | %C(green)%an%Creset, %C(blue)%ar%Creset'
    # Show files changed in each commit
    ll = log --color --graph --pretty=format:'%C(bold green)%h%Creset [%G?]-%C(yellow)%d%Creset %C(bold)%s%Creset | %C(green)%an%Creset, %C(blue)%ar%Creset' --numstat
    # Local branches
    b = branch
    # Remote branches
    br = branch -r
    cp = cherry-pick
    o = checkout
    # Checkout and create new if not exits
    ob = checkout -b
    d = diff
    # Review added files
    dc = diff --cached
    f = fetch
    r = remote
    w = whatchanged
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commit by source
    fcs = "!f() { git log --oneline --pretty=format:'%C(bold green)%h%Creset [%G?]-%C(yellow)%d%Creset %C(bold)%s%Creset | %C(green)%an%Creset, %C(blue)%ar%Creset' -S$1 | fzf | cut -d\" \" -f1; };f"
    # Find commit by message
    fcm = "!f() { git log --oneline --pretty=format:'%C(bold green)%h%Creset [%G?]-%C(yellow)%d%Creset %C(bold)%s%Creset | %C(green)%an%Creset, %C(blue)%ar%Creset' | fzf -q \"$1\" | cut -d\" \" -f1; };f"
    # Undo last commit
    undo = reset HEAD^ --soft
    u = undo

    snapshot = !git stash push "snapshot: $(date)" && git stash apply "stash@{0}"
    save = stash push
    pop = stash pop
    apply = stash apply
    list = stash list

    # Append changes to last commit
    append = commit -a --amend --no-edit
    amend = commit -a --amend
    # Get the current branch name (not so useful in itself, but used in other aliases)
    branch-name = !git rev-parse --abbrev-ref HEAD
    # Remove files from stage
    unstage = reset HEAD --
    # Reset files
    discard = checkout --
    # Fire up your difftool with all the changes that
    # are on the current branch.
    review = difftool origin/master...

    # Grep over current state
    g = grep --break --heading --line-number
    # Greap over all files ever commited
    gh = "!f() { git rev-list --all | xargs git grep --break --heading --line-number \"$1\"; };f"

    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = !git push -u origin $(git branch-name)
    # Delete the remote version of the current branch
    unpublish = !git push origin :$(git branch-name)
    # Delete a branch and recreate it from master â€” useful if you have, say,
    # a development branch and a master branch and they could conceivably go
    # out of sync
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"


    # Update from origin
    # The extra '&& :' is needed: https://stackoverflow.com/a/25915221
    sync = !git fetch --all --prune && git rebase -p --autostash $1 && :
    sync-recursive = !git fetch --all --prune && git submodule update --init --recursive && git rebase -p --autostash $1 && :
    p = !git sync
    # Update from upstream
    sync-upstream = !git fetch --all --prune && git rebase -p --autostash upstream/`git rev-parse --abbrev-ref HEAD` && :

    # Shows upstream
    upstream = rev-parse --abbrev-ref --symbolic-full-name @{upstream}
    set-upstream = remote add upstream
    rm-upstream = remote rm upstream
    set-github-upstream = "!f() { git remote add upstream \"git@github.com:$1.git\"; };f"
    # Shows origin
    origin = rev-parse --abbrev-ref --symbolic-full-name @{origin}
    set-origin = remote add origin
    rm-origin = remote rm origin
    set-github-origin = "!f() { git remote add origin \"git@github.com:$1.git\"; };f"

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # Reverse the above
    unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"

    # Checkout our version of a file and add it
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    # Checkout their version of a file and add it
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    delete-merged-branches = "!f() { git checkout ${1-master} && git branch --merged ${1-master} | grep -v \"${1-master}$\" | xargs git branch -d; };f"
    ignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"
    # List contributors with number of commits
	  contributors = shortlog --summary --numbered
